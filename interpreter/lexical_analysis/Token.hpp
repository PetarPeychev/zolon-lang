/*-------------------------------------------------------

Represents a single token generated by the lexical
analysis. Stores type, line number and literal value.

---------------------------------------------------------*/

#ifndef LEXICALANALYSIS_TOKEN_H
#define LEXICALANALYSIS_TOKEN_H

#include <string>

namespace lexical_analysis {

enum TokenType
{
    // Single-character tokens.
    PLUS, ASTERISK, FSLASH, BSLASH, LPAREN, RPAREN,
    COMMA, CARET, COLON, BAR, LBRACKET, RBRACKET, SEMICOLON, NEQUALS,

    // One-or-two-character tokens.
    MINUS, MAP, BIND, EQUALS, LEQUALS, LESS, GEQUALS, GREATER,

    // Literals.
    IDENTIFIER, NUMBER, PATH,

    // Keywords.
    BTRUE, BFALSE, IMPORT, NOT, AND, OR
};

class Token
{
private:
    TokenType type;
    int line;
    std::string sval;
    double nval;
public:
    Token(TokenType type, int line);
    Token(TokenType type, int line, std::string sval);
    Token(TokenType type, int line, double nval);
    std::string toString();
};
}

#endif
