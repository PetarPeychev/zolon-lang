factorial n =
  n > 1: n * (factorial (n - 1)) \ 1

=> Lexical Analysis =>

["factorial", "n", "=", "n", ">", "1", ":", "n", "*", "(", "factorial", "(", "n", "-", "1", ")", ")", "/", "1"]

=>

[
  { type: name, value: factorial },
  { type: name, value: n },
  { type: assignment, value: = },
  { type: op, value: > },
  { type: number, value: 1 },
  { type: colon, value: : },
  { type: op, value: * },
  { type: parenthesis, value: ( },
  { type: parenthesis, value: ) },
]

=> Syntactic Analysis =>

Abstract Syntax Tree (AST)

{
*     type: 'Program',
*     body: [{
*       type: 'CallExpression',
*       name: 'add',
*       params: [{
*         type: 'NumberLiteral',
*         value: '2',
*       }, {
*         type: 'CallExpression',
*         name: 'subtract',
*         params: [{
*           type: 'NumberLiteral',
*           value: '4',
*         }, {
*           type: 'NumberLiteral',
*           value: '2',
*         }]
*       }]
*     }]
*   }

{
  type: Program,
  body: [
    {
      type: FunctionDefinition,
      name: factorial,

    }
  ]
}
